services:
    # Zookeeper с надежными настройками
  zookeeper:
    image: zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOO_4LW_COMMANDS_WHITELIST: "*"
      ZOO_STANDALONE_ENABLED: "true"
      ZOO_MAX_CLIENT_CNXNS: 0  # Без лимита подключений
    networks:
      - dedup_net
    healthcheck:
      test: [ "CMD-SHELL", "zkServer.sh status" ]
      interval: 5s
      timeout: 5s
      retries: 10

    # Kafka brokers с правильными настройками
  kafka1:
    image: wurstmeister/kafka:2.13-2.8.1
    container_name: kafka1
    ports:
      - "9093:9093"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka1:9093"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9093"
      KAFKA_BROKER_ID: 1
      AUTO_CREATE_TOPICS_ENABLE: false
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - dedup_net
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server kafka1:9093" ]
      interval: 10s
      timeout: 10s
      retries: 10

  kafka2:
    image: wurstmeister/kafka:2.13-2.8.1
    container_name: kafka2
    ports:
      - "9094:9094"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka2:9094"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9094"
      KAFKA_BROKER_ID: 2
      AUTO_CREATE_TOPICS_ENABLE: false
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - dedup_net
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server kafka2:9094" ]
      interval: 10s
      timeout: 10s
      retries: 10

  kafka3:
    image: wurstmeister/kafka:2.13-2.8.1
    container_name: kafka3
    ports:
      - "9095:9095"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka3:9095"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9095"
      KAFKA_BROKER_ID: 3
      AUTO_CREATE_TOPICS_ENABLE: false
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - dedup_net
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server kafka3:9095" ]
      interval: 10s
      timeout: 10s
      retries: 10

    # Инициализация Kafka (создание топиков)
  kafka-init:
    image: wurstmeister/kafka:2.13-2.8.1
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    entrypoint: [ "/bin/bash", "-c" ]
    command: |
      bash -c "
      echo 'Waiting for Kafka brokers...';
      until kafka-broker-api-versions.sh --bootstrap-server kafka1:9093 >/dev/null 2>&1; do sleep 2; done;
      until kafka-broker-api-versions.sh --bootstrap-server kafka2:9094 >/dev/null 2>&1; do sleep 2; done;
      until kafka-broker-api-versions.sh --bootstrap-server kafka3:9095 >/dev/null 2>&1; do sleep 2; done;

      echo 'Creating topic events...';
      kafka-topics.sh --bootstrap-server kafka1:9093,kafka2:9094,kafka3:9095 \
        --create \
        --if-not-exists \
        --topic events \
        --partitions 6 \
        --replication-factor 3 \
        --config min.insync.replicas=2
      echo 'Topic creation finished';
      "
    networks:
      - dedup_net


  redis-node-0:
    image: redislabs/rebloom:latest
    container_name: redis-node-0
#    hostname: redis-node-0
    ports:
      - "6380:6379"
      - "16380:16379"
    networks:
      - redis-cluster
    volumes:
      - redis-node-0-data:/data
    command: [ "redis-server", "--port", "6379", "--cluster-enabled", "yes",
               "--cluster-announce-ip", "redis-node-0",
               "--cluster-config-file", "/data/nodes.conf",
               "--cluster-node-timeout", "5000",
               "--cluster-announce-port", "6379",
               "--cluster-announce-bus-port", "16379",
               "--appendonly", "yes",
               "--loadmodule", "/usr/lib/redis/modules/redisbloom.so" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "6379", "MODULE", "LIST" ]
      interval: 10s
      timeout: 5s
      retries: 10

  redis-node-1:
    image: redislabs/rebloom:latest
    container_name: redis-node-1
#    hostname: redis-node-1
    ports:
      - "6381:6379"
      - "16381:16379"
    networks:
      - redis-cluster
    volumes:
      - redis-node-1-data:/data
    command: [ "redis-server", "--port", "6379", "--cluster-enabled", "yes",
               "--cluster-announce-ip", "redis-node-1",
               "--cluster-config-file", "/data/nodes.conf",
               "--cluster-node-timeout", "5000",
               "--cluster-announce-port", "6379",
               "--cluster-announce-bus-port", "16379",
               "--appendonly", "yes",
               "--loadmodule", "/usr/lib/redis/modules/redisbloom.so" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "6379", "MODULE", "LIST" ]
      interval: 10s
      timeout: 5s
      retries: 10

  redis-node-2:
    image: redislabs/rebloom:latest
#    hostname: redis-node-2
    container_name: redis-node-2
    ports:
      - "6382:6379"
      - "16382:16379"
    networks:
      - redis-cluster
    volumes:
      - redis-node-2-data:/data
    command: [ "redis-server", "--port", "6379", "--cluster-enabled", "yes",
               "--cluster-announce-ip", "redis-node-2",
               "--cluster-config-file", "/data/nodes.conf",
               "--cluster-node-timeout", "5000",
               "--cluster-announce-port", "6379",
               "--cluster-announce-bus-port", "16379",
               "--appendonly", "yes",
               "--loadmodule", "/usr/lib/redis/modules/redisbloom.so" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "6379", "MODULE", "LIST" ]
      interval: 10s
      timeout: 5s
      retries: 10

  redis-node-3:
    image: redislabs/rebloom:latest
#    hostname: redis-node-3
    container_name: redis-node-3
    ports:
      - "6383:6379"
      - "16383:16379"
    networks:
      - redis-cluster
    volumes:
      - redis-node-3-data:/data
    command: [ "redis-server", "--port", "6379", "--cluster-enabled", "yes",
               "--cluster-announce-ip", "redis-node-3",
               "--cluster-config-file", "/data/nodes.conf",
               "--cluster-node-timeout", "5000",
               "--cluster-announce-port", "6379",
               "--cluster-announce-bus-port", "16379",
               "--appendonly", "yes",
               "--loadmodule", "/usr/lib/redis/modules/redisbloom.so" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "6379", "MODULE", "LIST" ]
      interval: 10s
      timeout: 5s
      retries: 10

  redis-node-4:
    image: redislabs/rebloom:latest
#    hostname: redis-node-4
    container_name: redis-node-4
    ports:
      - "6384:6379"
      - "16384:16379"
    networks:
      - redis-cluster
    volumes:
      - redis-node-4-data:/data
    command: [ "redis-server", "--port", "6379", "--cluster-enabled", "yes",
               "--cluster-announce-ip", "redis-node-4",
               "--cluster-config-file", "/data/nodes.conf",
               "--cluster-node-timeout", "5000",
               "--cluster-announce-port", "6379",
               "--cluster-announce-bus-port", "16379",
               "--appendonly", "yes",
               "--loadmodule", "/usr/lib/redis/modules/redisbloom.so" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "6379", "MODULE", "LIST" ]
      interval: 10s
      timeout: 5s
      retries: 10

  redis-node-5:
    image: redislabs/rebloom:latest
#    hostname: redis-node-5
    container_name: redis-node-5
    ports:
      - "6385:6379"
      - "16385:16379"
    networks:
      - redis-cluster
    volumes:
      - redis-node-5-data:/data
    command: [ "redis-server", "--port", "6379", "--cluster-enabled", "yes",
               "--cluster-announce-ip", "redis-node-5",
               "--cluster-config-file", "/data/nodes.conf",
               "--cluster-node-timeout", "5000",
               "--cluster-announce-port", "6379",
               "--cluster-announce-bus-port", "16379",
               "--appendonly", "yes",
               "--loadmodule", "/usr/lib/redis/modules/redisbloom.so" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "6379", "MODULE", "LIST" ]
      interval: 10s
      timeout: 5s
      retries: 10


  cluster-init:
    image: redislabs/rebloom:latest
    container_name: cluster-init
    command: [ "/bin/bash", "/scripts/init-cluster.sh" ]
    depends_on:
      redis-node-0:
        condition: service_healthy
      redis-node-1:
        condition: service_healthy
      redis-node-2:
        condition: service_healthy
      redis-node-3:
        condition: service_healthy
      redis-node-4:
        condition: service_healthy
      redis-node-5:
        condition: service_healthy
    networks:
      - redis-cluster
    volumes:
      - ./init-cluster.sh:/scripts/init-cluster.sh

  redis-standalone:
    image: redis:7
    container_name: redis_celery
    ports:
      - "6379:6379"
    networks:
      - dedup_net

  celery_worker:
    build: .
    container_name: celery_worker
    command: celery -A app.celery_app worker --loglevel=info --concurrency=4
    depends_on:
      - redis-standalone
      - postgres
    env_file:
      - .env
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka1:9093,kafka2:9094,kafka3:9095
      - REDIS_URL=redis://redis-standalone:6379/0
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=events
    volumes:
      - .:/app
    networks:
      - dedup_net
    restart: always

  celery_beat:
    build: .
    container_name: celery_beat
    command: celery -A app.celery_app beat --loglevel=info
    depends_on:
      - redis-standalone
      - postgres
    env_file:
      - .env
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka1:9093,kafka2:9094,kafka3:9095
      - REDIS_URL=redis://redis-standalone:6379/0
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=events
    volumes:
      - .:/app
    networks:
      - dedup_net
    restart: always

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: events
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - dedup_net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d events" ]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - dedup_net

  app:
    build: .
    container_name: deduplicator_app
    ports:
      - "8000:8000"
    depends_on:
      cluster-init:
        condition: service_completed_successfully
      kafka-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka1:9093,kafka2:9094,kafka3:9095
      - REDIS_NODES=redis-node-0:6379,redis-node-1:6379,redis-node-2:6379,redis-node-3:6379,redis-node-4:6379,redis-node-5:6379
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=events
    volumes:
      - .:/app
    networks:
      - dedup_net
      - redis-cluster
    restart: always
    command: >
      bash -c './wait_for_kafka.sh && ./start-consumer.sh & sleep 5 && poetry run uvicorn app.main:main_app --host 0.0.0.0 --port 8000 --workers 4'

  migrations:
    build: .
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    command: bash -c "alembic upgrade head"
    networks:
      - dedup_net

  consumer_1: &consumer_base
    build: .
    container_name: consumer_1
    depends_on:
      cluster-init:
        condition: service_completed_successfully
      kafka-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka1:9093,kafka2:9094,kafka3:9095
      - REDIS_NODES=redis-node-0:6379,redis-node-1:6379,redis-node-2:6379,redis-node-3:6379,redis-node-4:6379,redis-node-5:6379
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=events
    networks:
      - dedup_net
      - redis-cluster
    command: bash -c "sleep 30 && ./start-consumer.sh && poetry run python -m app.deduplicator.consumer"


  consumer_2:
    <<: *consumer_base
    container_name: consumer_2

  consumer_3:
    <<: *consumer_base
    container_name: consumer_3

volumes:
  pg_data:
  zookeeper_data:
  redis-node-0-data:
  redis-node-1-data:
  redis-node-2-data:
  redis-node-3-data:
  redis-node-4-data:
  redis-node-5-data:

networks:
  dedup_net:
    driver: bridge
  redis-cluster:
    driver: bridge

